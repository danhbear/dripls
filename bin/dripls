#!/usr/bin/env python2.7

import argparse
import os
import sys
import traceback
import logging
import cherrypy
import setproctitle

sys.path.insert(0, os.path.realpath(os.path.join(os.path.dirname(os.path.dirname(__file__)), 'dripls')))

import conf as config
import main

def _daemonize():
    cherrypy.config.update({ 'log.screen' : False })
    if hasattr(cherrypy.engine, 'signal_handler'):
        cherrypy.engine.signal_handler.subscribe()
    if hasattr(cherrypy.engine, 'console_control_handler'):
        cherrypy.engine.console_control_handler.subscribe()
    daemon = cherrypy.process.plugins.Daemonizer(cherrypy.engine)
    daemon.subscribe()

if __name__ == '__main__':
    try:
        parser = argparse.ArgumentParser(description='Hulu Plus feed service.')
        parser.add_argument('-b', '--bind', dest='bind_address',
            help='Socket to bind')
        parser.add_argument('--daemon', action='store_true',
            help='Daemonize process')
        parser.add_argument('-p', '--pid', dest='pidfile',
            help='Filename for the PID file')
        parser.add_argument('--port', dest='port', type=int,
            help='Port to listen on')
        parser.add_argument('--app_root_url', dest='app_root_url',
            help='External url in case the app is behind a proxy') 
        parser.add_argument('--access-log', dest='access_log',
            help='Path for access log')
        parser.add_argument('--error-log', dest='error_log',
            help='Path for error log')
        args = parser.parse_args()
        
        if args.bind_address:
            config.socket = args.bind_address
        if args.pidfile:
            config.pidfile = args.pidfile
        if args.port:
            config.port = args.port
        if args.access_log:
            config.access_file = args.access_log
        if args.error_log:
            config.error_file = args.error_log
        if args.app_root_url:
            config.app['root_url'] = args.app_root_url
            
        cherrypy.engine.subscribe('start', main.root.on_server_start)
        cherrypy.engine.subscribe('start', main.root.on_start)
        
        cherrypy.config.update({
            'log.screen'            : True,
            'tools.gzip.on'         : True,
            'server.socket_host'    : config.socket,
            'server.socket_port'    : config.port,
            'server.thread_pool'    : config.thread_pool,
            'server.socket_timeout' : 30
        })
        
        if args.daemon:
            _daemonize()
        
        if config.pidfile:
            cherrypy.process.plugins.PIDFile(cherrypy.engine, config.pidfile).subscribe()
        
        setproctitle.setproctitle(os.path.basename(__file__))
        cherrypy.engine.start()
        cherrypy.engine.block()
    except Exception, e:
        logging.error("Server failed to start. Exiting ...")
        logging.error(e)
        logging.error(traceback.print_exc(file=sys.stdout))
        sys.exit(1)

